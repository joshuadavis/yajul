<project name="yajul-core" default="default">

    <!-- Load in property overrides first (such as build.dir) -->

    <!-- Default property values -->
    <property name="main.src.dir" value="src"/>
    <property name="build.dir" value="build"/>
    <property name="dist.dir" value="${build.dir}/dist"/>
    <property name="main.class.dir" value="${build.dir}/classes"/>
    <property name="main.jar.dir" value="${build.dir}/lib"/>
    <property name="javac.debug" value="true"/>
    <property name="javac.optimize" value="true"/>
    <property name="javac.deprecation" value="true"/>
    <property name="javac.verbose" value="false"/>

    <property name="test.src.dir" value="${basedir}/test_src"/>
    <property name="test.class.dir" value="${build.dir}/test_classes"/>
    <property name="test.log.dir" value="${build.dir}/test/log"/>
    <property name="junit.dir" value="${test.log.dir}"/>
    <property name="lib.dir" value="${basedir}/lib"/>

    <path id="compile.classpath">
        <pathelement path="${lib.dir}/xml-apis.jar:${lib.dir}/xercesImpl.jar:${lib.dir}/xalan.jar"/>
        <pathelement path="${lib.dir}/log4j-1.2.7.jar"/>
        <pathelement path="${lib.dir}/jdbc2_0-stdext.jar"/>
        <pathelement path="${lib.dir}/spring.jar"/>
        <pathelement path="${lib.dir}/servlet-2.3.jar"/>
        <pathelement path="${lib.dir}/jaas-1.0.01.jar"/>
        <pathelement path="${lib.dir}/jta.jar"/>        
    </path>

    <path id="test.classpath">
        <pathelement path="${ant.home}/lib/clover.jar"/>
        <path refid="compile.classpath"/>
        <pathelement path="${lib.dir}/junit.jar"/>
        <pathelement location="${main.class.dir}"/>
        <pathelement path="${lib.dir}/jdepend.jar"/>
    </path>

    <path id="test.runtime.classpath">
        <pathelement path="${basedir}/test_data/resources"/>
        <path refid="test.classpath"/>
        <pathelement location="${test.class.dir}"/>
        <!-- Required for testing -->
        <pathelement path="${lib.dir}/hsqldb.jar"/>
        <!-- Required for Spring testing -->
        <pathelement path="${lib.dir}/commons-logging.jar"/>
    </path>

    <patternset id="test.files">
        <include name="org/yajul/**/*Test*.java"/>
    </patternset>

    <patternset id="java.files">
        <include name="org/yajul/**/*.java"/>
    </patternset>


    <target name="with.clover">
        <taskdef resource="clovertasks"/>
        <!-- <mkdir dir="${build.dir}/yajul_coverage.db"/> -->
        <clover-setup initString="${build.dir}/yajul_coverage.db"/>
    </target>

    <target name="init">
        <tstamp>
            <format property="build.time" pattern="MM/dd/yyyy hh:mm aa"/>
        </tstamp>
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${dist.dir}"/>
    </target>

    <target name="clean.classes">
        <delete includeEmptyDirs="true" failonerror="false">
            <fileset dir="${main.class.dir}"/>
            <fileset dir="${test.class.dir}"/>
        </delete>
    </target>

    <target name="clean" depends="init,clean.classes">
        <delete includeEmptyDirs="true" failonerror="false">
            <fileset dir="${main.jar.dir}"/>
            <fileset dir="${test.log.dir}"/>
            <fileset dir="${build.dir}"/>
        </delete>
    </target>

    <target name="compile" depends="init">
        <mkdir dir="${main.class.dir}"/>
        <javac srcdir="${main.src.dir}" destdir="${main.class.dir}"
            classpathref="compile.classpath" debug="${javac.debug}"
            optimize="${javac.optimize}" deprecation="${javac.deprecation}"
            verbose="${javac.verbose}"/>
        <copy todir="${main.class.dir}">    <!-- Copy resources into the class directory. -->
            <fileset dir="${main.src.dir}">
                <include name="**/*.properties"/>
                <include name="**/*.xml"/>
                <include name="**/*.dtd"/>
            </fileset>
        </copy>
    </target>

    <target name="compile.tests" depends="init">
        <mkdir dir="${test.class.dir}"/>
        <echo message="${ant.project.name} Compiling test classes to ${test.class.dir}"/>
        <javac srcdir="${test.src.dir}" destdir="${test.class.dir}"
            classpathref="test.classpath" debug="${javac.debug}"
            optimize="${javac.optimize}" deprecation="${javac.deprecation}"
            verbose="${javac.verbose}"/>
    </target>

    <target name="test" depends="init">
        <mkdir dir="${test.log.dir}"/>
        <junit fork="yes" printsummary="yes" haltonfailure="yes" dir="${basedir}">
            <classpath>
                <path refid="test.runtime.classpath"/>
            </classpath>
            <formatter type="plain"/>
            <batchtest todir="${test.log.dir}">
                <fileset dir="${test.src.dir}">
                    <patternset refid="test.files"/>
                </fileset>
            </batchtest>
        </junit>
    </target>

    <target name="test.xmlreport" depends="init" description="Perform unit tests, generating an XML report.">
        <mkdir dir="${junit.dir}"/>
        <junit fork="yes"
            printsummary="yes" haltonfailure="yes" showoutput="no" dir="${basedir}">
            <classpath>
                <path refid="test.runtime.classpath"/>
            </classpath>

            <formatter type="xml"/>
            <batchtest todir="${junit.dir}">
                <fileset dir="${test.src.dir}">
                    <patternset refid="test.files"/>
                </fileset>
            </batchtest>
        </junit>
    </target>

    <target name="test.textreport" depends="init" description="Perform unit tests, generating a text report.">
        <junit fork="yes"
            printsummary="yes" haltonfailure="yes" showoutput="no" dir="${basedir}">
            <classpath>
                <path refid="test.runtime.classpath"/>
            </classpath>

            <formatter type="plain"/>
            <batchtest todir="${junit.dir}">
                <fileset dir="${test.src.dir}">
                    <patternset refid="test.files"/>
                </fileset>
            </batchtest>
        </junit>
    </target>

    <target name="jar" depends="init">
        <mkdir dir="${main.jar.dir}"/>
        <jar jarfile="${main.jar.dir}/${ant.project.name}.jar"
            basedir="${main.class.dir}"/>
    </target>

    <target name="javadoc" depends="init" description="Build the Javadoc.">
        <javadoc
            destdir="${build.dir}/docs/api"
            author="true"
            version="true"
            use="true"
            windowtitle="YAJUL Core API">

            <fileset dir="src" defaultexcludes="yes">
                <include name="org/yajul/**/*.java"/>
            </fileset>

            <doctitle><![CDATA[<h1>YAJUL</h1>]]></doctitle>
            <bottom><![CDATA[<i>Copyright &#169; 2001-2004, The YAJUL developers. All Rights Reserved.</i>]]></bottom>
            <tag name="todo" scope="all" description="To do:"/>
            <!--
                    <group title="Group 1 Packages" packages="com.dummy.test.a*"/>
                    <group title="Group 2 Packages" packages="com.dummy.test.b*:com.dummy.test.c*"/>
            -->
            <link offline="true" href="http://java.sun.com/products/jdk/1.3/docs/api/" packagelistLoc="${build.dir}/tmp"/>
            <link href="http://developer.java.sun.com/developer/products/xml/docs/api/"/>
        </javadoc>
    </target>

    <target name="junit.report">
        <mkdir dir="${build.dir}/junit"/>
        <mkdir dir="${build.dir}/junit-xml"/>
        <junitreport todir="${build.dir}/junit-xml">
          <fileset dir="${junit.dir}">
            <include name="TEST-*.xml"/>
          </fileset>
          <report format="frames" todir="${build.dir}/junit"/>
        </junitreport>
    </target>
    
    <target name="dist.source" depends="init" description="Build the source distribution file.">
        <!-- Zip up all of the source files -->
        <zip zipfile="${dist.dir}/${ant.project.name}-source.zip">
            <fileset dir=".">
                <include name="src/**"/>
                <include name="test_src/**"/>
                <include name="test_data/**"/>
                <include name="build.xml"/>
            </fileset>
        </zip>
    </target>

    <target name="jar.src" depends="init" description="Create the source jar.">
        <jar jarfile="${main.jar.dir}/${ant.project.name}-src.jar"
            basedir="${main.src.dir}"/>
    </target>

    <target name="default" depends="compile,jar,compile.tests"/>

    <target name="jdepend">
        <mkdir dir="${build.dir}/jdepend-xml"/>
        <jdepend format="xml" outputfile="${build.dir}/jdepend-xml/jdepend-report.xml">
            <sourcespath>
                <pathelement location="${build.dir}/classes" />
            </sourcespath>
            <classpath location="${build.dir}/classes" />
        </jdepend>
        <mkdir dir="${build.dir}/jdepend"/>
        <style in="${build.dir}/jdepend-xml/jdepend-report.xml" out="${build.dir}/jdepend/index.html"
            style="jdepend.xsl" />
    </target>

    <target name="report.html" depends="with.clover">
       <clover-report>
          <current outfile="${build.dir}/clover_html" title="YAJUL core test coverage">
             <format type="html"/> 
          </current>	 
       </clover-report>
    </target>
    
    <target name="docs" depends="junit.report,javadoc,jdepend"/>
        
    <target name="recompile" depends="clean.classes,compile,compile.tests"/>
        
    <target name="clover" depends="with.clover,recompile,test,report.html"/>

    <target name="full" depends="clean,compile,jar,jar.src,compile.tests,test.xmlreport,docs,clover">
    </target>

    <target name="clean.build" depends="clean,compile,jar,jar.src,compile.tests,test"
        description="Clean and build everything but the Javadoc.">
    </target>
    
</project>
