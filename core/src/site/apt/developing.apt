    ---
    Developing YAJUL
    ---

Building YAJUL from sources

  {build-from-source} YAJUL uses {{{http://maven.apache.org}Maven2}} as a build tool, so the first step is to 
  {{{http://maven.apache.org/download.html}Download and install Maven2}}.  For Maven2 to work properly from the
  command line, the shell environment needs the following:

  * JAVA_HOME should point to a valid JDK.  Java 5+ is required.  The default is Java 6.

  * M2_HOME should point to your Maven2 install.  Maven 2.0.7+ is required.

  * PATH should include M2_HOME/bin and JAVA_HOME/bin

  These are some of the more frequently used Maven goals:

  * compile

  * test

  * package

  * install

  * clean

  * source:jar

  * site

  To build everything from scratch, run:

+----------------------+
mvn clean install site
+----------------------+

Repository Setup

 * The Embedded JBoss libraries and the Java Enterprise dependencies (javax.jmx and javax.transaction, for example) are
 available in the {{{http://repository.jboss.org/maven2}JBoss Public Maven Repository}}.

 * The Guice libraries are in the {{{http://guice-maven.googlecode.com/svn/trunk}guice-maven repository}} (why is this
 an SVN trunk?  Is that really the best way to do expose a maven repository?)

 These repositories are automatically added in the main POM file:

+----------------------------------------------------------------------------------+
<repositories>
    <!-- The JBoss Maven2 repository for the JMS 1.1 API and embedded JBoss. -->
    <repository>
        <id>maven2-repository.jboss</id>
        <name>Maven2 repository at JBoss.org</name>
        <url>http://repository.jboss.org/maven2</url>
    </repository>
    <!-- Guice 2.0.x still isn't in the main repository -->
    <repository>
        <id>guice-maven</id>
        <name>guice maven</name>
        <url>http://guice-maven.googlecode.com/svn/trunk</url>
    </repository>
</repositories>
+----------------------------------------------------------------------------------+

Using IDEA to develop YAJUL

  YAJUL comes with a .ipr project that will have everything set up for building and testing the YAJUL code.  Simply
  check out the codebase with SVN and open up the .ipr file with IDEA 9.

Editing the YAJUL site

  Maven generates a project website from files in the 'src/site' directory.  The files in the 'src/site/apt' directory
  are in {{{http://maven.apache.org/doxia/references/apt-format.html}the APT format}}, which is a bit like wiki text.
  These can be edited with any text editor.
