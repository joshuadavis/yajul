package test

import org.yajul.jdbc.ConnectionInfo
import groovy.grape.Grape
import org.yajul.dbarchiver.Archiver
import groovy.sql.Sql
import org.yajul.dbarchiver.ArchiverException

/**
 * TODO: Add class level comments!
 * <br>
 * User: josh
 * Date: Feb 23, 2010
 * Time: 8:08:57 AM
 */
class ArcTest extends GroovyTestCase {

  def ArcTest() {
  }

  void testArchiver() {

    Grape.grab(group: 'org.hsqldb', module: 'hsqldb', version: '1.8.0.10', classLoader: this.class.classLoader.rootLoader)

    def username = "sa"
    def password = ""
    def driverClassName = 'org.hsqldb.jdbcDriver'

    def sourceInfo = new ConnectionInfo(
            url: "jdbc:hsqldb:file:data/sourcedb",
            username: username,
            password: password,
            driverClassName: driverClassName)

    def targetInfo = new ConnectionInfo(
            url: "jdbc:hsqldb:file:data/targetdb",
            username: username,
            password: password,
            driverClassName: driverClassName)

    def archiver = new Archiver(sourceInfo, targetInfo)

// HSQLDB capitalizes table names
    def tableName = 'LOG_EVENT'

    Sql sourceSql = archiver.source.sql
    Sql targetSql = archiver.target.sql

// Create a table...
    println "creating ${tableName}..."
    sourceSql.executeUpdate('drop table if exists ' + tableName)
    targetSql.executeUpdate('drop table if exists ' + tableName)
    sourceSql.executeUpdate('create table ' + tableName + ''' (
id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
event_timestamp timestamp,
event_millis bigint,
message varchar(128) )
''')

    sourceSql.executeUpdate('drop table if exists NOTSAME')
    targetSql.executeUpdate('drop table if exists NOTSAME')
    sourceSql.executeUpdate('''create table NOTSAME (
id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
event_timestamp timestamp,
event_millis bigint,
message varchar(128) )
''')
    targetSql.executeUpdate('''create table NOTSAME (
id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
event_timestamp timestamp,
event_millis bigint,
something char(22),
message varchar(128) )
''')

    try
    {
      archiver.checkSchema('NOTSAME','NOTSAME')
      fail("Exception expected!")
    }
    catch (ArchiverException ignore)
    {
    }

//def schema = new DbSchema(archiver.source)
//schema.tables.values().each { println "${it.name}" }

// Create some rows, one every day starting with 2008-12-01
    def date = new GregorianCalendar(2008, Calendar.DECEMBER, 01).time
    println "adding test data..."
    for (i in 1..100000) {
      sourceSql.executeUpdate('INSERT INTO ' + tableName +
              ' (event_timestamp,event_millis,message) values (?,?,?)',
              (List<Object>)[ new java.sql.Timestamp(date.time), date.time, "MSG ${i}"])
      date = new Date(date.time + 1000 * 60)
    }

    println "copying data..."

// Get a batch of rows from the source table.
    def conditions = "where event_timestamp < '2009-01-01 00:00:00'"
    def orderBy = "order by event_timestamp asc, event_millis asc, id asc"
    def batchSize = 500
    def targetTableName = 'COPY_TO'
    archiver.with {
      createTargetTable = true
      archiveRows(tableName, targetTableName, conditions, orderBy, batchSize)
    }

    sourceSql.eachRow('select * from ' + tableName + ' ' + orderBy + ' limit 1') {
      r -> println "${r}"
    }

    targetSql.eachRow('select * from ' + targetTableName + ' ' + orderBy + ' limit 1') {
      r -> println "${r}"
    }
  }
}
